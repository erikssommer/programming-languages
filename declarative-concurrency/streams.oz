functor
import
    Application(exit:Exit)
    System
define
    % Streams
    % Task 2

    % Method for Visualizing Streams
    proc {ShowStream List}
        case List of _|Tail then
            {System.show List.1}
            thread {ShowStream Tail} end
        else
            skip 
        end
    end

    % a) Implement a function fun {Enumerate Start End} that generates, asynchronously, a stream of numbers from Start until End. Hint: You can use the thread ... end statement inside the definition of the function, to wrap the iterative process that generates the numbers.
    
    fun {Enumerate Start End}
        if Start =< End then
            Start|{Enumerate Start+1 End}
        else nil end
    end

    local Res in
        thread Res = {Enumerate 1 5} end
        {ShowStream Res} % prints [1 2 3 4 5]
    end

    {Delay 100} % wait for 100 milliseconds

    % b) Implement a function fun {GenerateOdd Start End} that generates, asynchronously, a stream of odd numbers from Start to End. The GenerateOdd function must be implemented as a consumer of Enumerate. That is, it must read the stream generated by Enumerate and filter it as appropriate.
    
    fun {GenerateOdd Start End}
        if Start =< End then
            if {Int.isOdd Start} then
                Start|{GenerateOdd Start+2 End}
            else
                {GenerateOdd Start+1 End}
            end
        else nil end
    end

    local Res in
        thread Res = {GenerateOdd 1 5} end
        {ShowStream Res} % prints [1 3 5]
        thread {ShowStream {GenerateOdd 4 4}} end
    end

    {Exit 0}
end